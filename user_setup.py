#!/usr/bin/env python3
"""
ูุธุงู ุฅุนุฏุงุฏ ุงููุณุชุฎุฏู ูุฅุฑุณุงู ุงูุณูุฑุฉ ุงูุฐุงุชูุฉ
User Setup System for CV Sending Automation
"""

import os
import sys
import json
import getpass
from datetime import datetime, time
import pytz

class UserSetup:
    """ูุฆุฉ ุฅุนุฏุงุฏ ุงููุณุชุฎุฏู"""
    
    def __init__(self):
        self.user_data = {}
        self.config_file = "user_config.json"
        self.available_cities = [
            "ุงูุฑูุงุถ", "ุฌุฏุฉ", "ุงูุฏูุงู", "ููุฉ ุงูููุฑูุฉ", "ุงููุฏููุฉ ุงููููุฑุฉ", "ุงูุทุงุฆู", "ุชุจูู", "ุงูุฃุญุณุงุก", "ุจุฑูุฏุฉ", "ุฎููุณ ูุดูุท",
            "ุฏุจู", "ุฃุจูุธุจู", "ุงูุดุงุฑูุฉ", "ุนุฌูุงู", "ุงููุฌูุฑุฉ", "ุฑุฃุณ ุงูุฎููุฉ", "ุฃู ุงูููููู",
            "ุงููููุช", "ุงูุฃุญูุฏู", "ุงููุฑูุงููุฉ", "ุงูุฌูุฑุงุก", "ุญููู", "ูุจุงุฑู ุงููุจูุฑ",
            "ุนูุงู", "ุงูุฒุฑูุงุก", "ุฅุฑุจุฏ", "ุงูุฑุตููุฉ", "ุงูุทูููุฉ", "ุงููุฑู", "ูุนุงู", "ุงูุนูุจุฉ",
            "ูุณูุท", "ุตูุงูุฉ", "ูุฒูู", "ุตูุฑ", "ุตุญุงุฑ", "ุงูุฑุณุชุงู", "ุงูุจุฑููู"
        ]
        
    def welcome_message(self):
        """ุฑุณุงูุฉ ุงูุชุฑุญูุจ"""
        print("=" * 80)
        print("๐ ูุฑุญุจุงู ุจู ูู ูุธุงู ุฅุฑุณุงู ุงูุณูุฑุฉ ุงูุฐุงุชูุฉ ุงูุขูู")
        print("   Welcome to CV Sending Automation System")
        print("=" * 80)
        print()
        print("๐ ูุฐุง ุงููุธุงู ุณูุณุงุนุฏู ูู:")
        print("   โข ุฅุฑุณุงู ุณูุฑุชู ุงูุฐุงุชูุฉ ูุดุฑูุงุช ุงูุจุฑูุฌูุงุช")
        print("   โข ุงูุจุญุซ ุนู ุงููุธุงุฆู ูู ุฏูู ุงูุฎููุฌ ูุงูุฃุฑุฏู")
        print("   โข ุฅุฏุงุฑุฉ ุนูููุฉ ุงูุฅุฑุณุงู ุชููุงุฆูุงู")
        print()
        
    def get_user_info(self):
        """ุฌูุน ูุนูููุงุช ุงููุณุชุฎุฏู"""
        print("๐ ูู ูุถูู ุฃุฏุฎู ูุนูููุงุชู ุงูุดุฎุตูุฉ:")
        print("-" * 50)
        
        # ุงูุงุณู
        while True:
            name = input("๐ง ุงูุงุณู ุงููุงูู (Full Name): ").strip()
            if name:
                self.user_data['name'] = name
                break
            print("โ ุงูุงุณู ูุทููุจ!")
        
        # ุงูุจุฑูุฏ ุงูุฅููุชุฑููู
        while True:
            email = input("๐ง ุงูุจุฑูุฏ ุงูุฅููุชุฑููู (Gmail): ").strip()
            if email and "@gmail.com" in email:
                self.user_data['email'] = email
                break
            print("โ ูุฌุจ ุฃู ูููู ุจุฑูุฏ Gmail ุตุญูุญ!")
        
        # ูููุฉ ูุฑูุฑ ุงูุชุทุจูู
        print("\n๐ ุฅุนุฏุงุฏ ูููุฉ ูุฑูุฑ ุงูุชุทุจูู:")
        print("   ูุงุณุชุฎุฏุงู Gmailุ ุชุญุชุงุฌ ุฅูู:")
        print("   1. ุชูุนูู ุงููุตุงุฏูุฉ ุงูุซูุงุฆูุฉ")
        print("   2. ุฅูุดุงุก ูููุฉ ูุฑูุฑ ุงูุชุทุจูู ูู:")
        print("      https://myaccount.google.com/apppasswords")
        print()
        
        while True:
            password = getpass.getpass("๐ ูููุฉ ูุฑูุฑ ุงูุชุทุจูู (App Password): ").strip()
            if password:
                self.user_data['app_password'] = password
                break
            print("โ ูููุฉ ูุฑูุฑ ุงูุชุทุจูู ูุทููุจุฉ!")
        
        # ุฑูู ุงููุงุชู
        while True:
            phone = input("๐ฑ ุฑูู ุงููุงุชู (Phone Number): ").strip()
            if phone:
                self.user_data['phone'] = phone
                break
            print("โ ุฑูู ุงููุงุชู ูุทููุจ!")
        
        # ุงุณู ููู ุงูุณูุฑุฉ ุงูุฐุงุชูุฉ
        print("\n๐ ุฅุนุฏุงุฏ ุงูุณูุฑุฉ ุงูุฐุงุชูุฉ:")
        cv_files = [f for f in os.listdir('.') if f.endswith('.pdf')]
        
        if cv_files:
            print(f"๐ ุชู ุงูุนุซูุฑ ุนูู ูููุงุช PDF: {', '.join(cv_files)}")
            if len(cv_files) == 1:
                cv_name = cv_files[0]
                print(f"โ ุณูุชู ุงุณุชุฎุฏุงู: {cv_name}")
            else:
                print("๐ ุงุฎุชุฑ ููู ุงูุณูุฑุฉ ุงูุฐุงุชูุฉ:")
                for i, file in enumerate(cv_files, 1):
                    print(f"   {i}. {file}")
                
                while True:
                    try:
                        choice = int(input("ุงุฎุชุฑ ุงูุฑูู: ")) - 1
                        cv_name = cv_files[choice]
                        break
                    except (ValueError, IndexError):
                        print("โ ุงุฎุชูุงุฑ ุบูุฑ ุตุญูุญ!")
        else:
            cv_name = input("๐ ุงุณู ููู ุงูุณูุฑุฉ ุงูุฐุงุชูุฉ (CV filename): ").strip()
            if not cv_name:
                cv_name = "cv.pdf"
        
        self.user_data['cv_file'] = cv_name
        
        # ุงูุชุฎุตุต/ุงููุธููุฉ
        print("\n๐ผ ุงูุชุฎุตุต ุงููุทููุจ:")
        job_options = [
            "Software Project Manager",
            "Full Stack Developer", 
            "Frontend Developer",
            "Backend Developer",
            "Mobile App Developer",
            "DevOps Engineer",
            "Software Engineer",
            "Technical Lead",
            "Product Manager"
        ]
        
        print("๐ ุงุฎุชุฑ ุงูุชุฎุตุต ุฃู ุงูุชุจ ุชุฎุตุต ูุฎุตุต:")
        for i, job in enumerate(job_options, 1):
            print(f"   {i}. {job}")
        print("   0. ุชุฎุตุต ูุฎุตุต")
        
        while True:
            try:
                choice = input("ุงุฎุชุฑ ุงูุฑูู ุฃู ุงูุชุจ ุงูุชุฎุตุต: ").strip()
                if choice.isdigit():
                    choice = int(choice)
                    if choice == 0:
                        job_title = input("ุงูุชุจ ุงูุชุฎุตุต: ").strip()
                        if job_title:
                            self.user_data['job_title'] = job_title
                            break
                    elif 1 <= choice <= len(job_options):
                        self.user_data['job_title'] = job_options[choice-1]
                        break
                    else:
                        print("โ ุฑูู ุบูุฑ ุตุญูุญ!")
                else:
                    self.user_data['job_title'] = choice
                    break
            except ValueError:
                print("โ ุฅุฏุฎุงู ุบูุฑ ุตุญูุญ!")
        
        # ุงููุฏู ุงููุทููุจุฉ
        self.get_target_cities()
        
        # ุชูููุช ุงูุชุดุบูู
        self.get_schedule_time()
        
    def get_target_cities(self):
        """ุงุฎุชูุงุฑ ุงููุฏู ุงููุทููุจุฉ"""
        print("\n๐๏ธ ุงููุฏู ุงููุทููุจุฉ ููุจุญุซ:")
        print("1. ุงุฎุชูุงุฑ ูู ูุงุฆูุฉ ุงููุฏู ุงููุชุงุญุฉ")
        print("2. ูุชุงุจุฉ ุงููุฏู ูุฏููุงู")
        print("3. ุฌููุน ุงููุฏู ุงููุชุงุญุฉ")
        
        while True:
            choice = input("ุงุฎุชุฑ ุงูุทุฑููุฉ (1-3): ").strip()
            if choice == "1":
                self.select_cities_from_list()
                break
            elif choice == "2":
                self.enter_cities_manually()
                break
            elif choice == "3":
                self.user_data['target_cities'] = self.available_cities
                print("โ ุชู ุงุฎุชูุงุฑ ุฌููุน ุงููุฏู ุงููุชุงุญุฉ")
                break
            else:
                print("โ ุงุฎุชูุงุฑ ุบูุฑ ุตุญูุญ!")
    
    def select_cities_from_list(self):
        """ุงุฎุชูุงุฑ ุงููุฏู ูู ุงููุงุฆูุฉ"""
        print("\n๐ ุงููุฏู ุงููุชุงุญุฉ:")
        
        # ุชุฌููุน ุงููุฏู ุจุงูุฏูู
        saudi_cities = self.available_cities[:10]
        uae_cities = self.available_cities[10:17]
        kuwait_cities = self.available_cities[17:22]
        jordan_cities = self.available_cities[22:30]
        oman_cities = self.available_cities[30:]
        
        print("\n๐ธ๐ฆ ุงูุณุนูุฏูุฉ:")
        for i, city in enumerate(saudi_cities, 1):
            print(f"   {i}. {city}")
        
        print("\n๐ฆ๐ช ุงูุฅูุงุฑุงุช:")
        for i, city in enumerate(uae_cities, 11):
            print(f"   {i}. {city}")
        
        print("\n๐ฐ๐ผ ุงููููุช:")
        for i, city in enumerate(kuwait_cities, 18):
            print(f"   {i}. {city}")
        
        print("\n๐ฏ๐ด ุงูุฃุฑุฏู:")
        for i, city in enumerate(jordan_cities, 23):
            print(f"   {i}. {city}")
        
        print("\n๐ด๐ฒ ุนูุงู:")
        for i, city in enumerate(oman_cities, 31):
            print(f"   {i}. {city}")
        
        print("\nุฃุฏุฎู ุฃุฑูุงู ุงููุฏู ููุตููุฉ ุจูุงุตูุฉ (ูุซุงู: 1,2,5,10)")
        print("ุฃู ุงูุชุจ 'all' ูุฌููุน ุงููุฏู")
        
        while True:
            selection = input("ุงุฎุชุฑ ุงููุฏู: ").strip()
            if selection.lower() == 'all':
                self.user_data['target_cities'] = self.available_cities
                print("โ ุชู ุงุฎุชูุงุฑ ุฌููุน ุงููุฏู")
                break
            
            try:
                indices = [int(x.strip()) for x in selection.split(',')]
                selected_cities = []
                for idx in indices:
                    if 1 <= idx <= len(self.available_cities):
                        selected_cities.append(self.available_cities[idx-1])
                    else:
                        print(f"โ ุฑูู ุบูุฑ ุตุญูุญ: {idx}")
                        break
                else:
                    if selected_cities:
                        self.user_data['target_cities'] = selected_cities
                        print(f"โ ุชู ุงุฎุชูุงุฑ {len(selected_cities)} ูุฏููุฉ:")
                        for city in selected_cities:
                            print(f"   โข {city}")
                        break
                    else:
                        print("โ ูู ูุชู ุงุฎุชูุงุฑ ุฃู ูุฏููุฉ!")
            except ValueError:
                print("โ ุชูุณูู ุบูุฑ ุตุญูุญ! ุงุณุชุฎุฏู ุฃุฑูุงู ููุตููุฉ ุจูุงุตูุฉ")
    
    def enter_cities_manually(self):
        """ูุชุงุจุฉ ุงููุฏู ูุฏููุงู"""
        print("\nโ๏ธ ุงูุชุจ ุงููุฏู ููุตููุฉ ุจูุงุตูุฉ:")
        print("ูุซุงู: ุงูุฑูุงุถ, ุฏุจู, ุงููููุช, ุนูุงู")
        
        while True:
            cities_input = input("ุงููุฏู: ").strip()
            if cities_input:
                cities = [city.strip() for city in cities_input.split(',')]
                cities = [city for city in cities if city]  # ุฅุฒุงูุฉ ุงููุฑุงุบุงุช
                if cities:
                    self.user_data['target_cities'] = cities
                    print(f"โ ุชู ุฅุฏุฎุงู {len(cities)} ูุฏููุฉ:")
                    for city in cities:
                        print(f"   โข {city}")
                    break
                else:
                    print("โ ูู ูุชู ุฅุฏุฎุงู ุฃู ูุฏููุฉ!")
            else:
                print("โ ูุฌุจ ุฅุฏุฎุงู ุงููุฏู!")
    
    def get_schedule_time(self):
        """ุชุญุฏูุฏ ุชูููุช ุงูุชุดุบูู"""
        print("\nโฐ ุชูููุช ุชุดุบูู ุงููุธุงู:")
        print("1. ุชุดุบูู ููุฑู (ุงูุขู)")
        print("2. ุชุดุบูู ูููู ูู ููุช ูุญุฏุฏ")
        print("3. ุชุดุบูู ุฃุณุจูุนู")
        print("4. ุชุดุบูู ุดูุฑู")
        
        while True:
            choice = input("ุงุฎุชุฑ ููุน ุงูุชุดุบูู (1-4): ").strip()
            if choice == "1":
                self.user_data['schedule_type'] = 'immediate'
                print("โ ุณูุชู ุงูุชุดุบูู ููุฑุงู")
                break
            elif choice == "2":
                self.get_daily_schedule()
                break
            elif choice == "3":
                self.get_weekly_schedule()
                break
            elif choice == "4":
                self.get_monthly_schedule()
                break
            else:
                print("โ ุงุฎุชูุงุฑ ุบูุฑ ุตุญูุญ!")
    
    def get_daily_schedule(self):
        """ุชุญุฏูุฏ ุงูุชูููุช ุงููููู"""
        print("\n๐ ุงูุชุดุบูู ุงููููู:")
        print("ุฃุฏุฎู ุงูููุช ุจุตูุบุฉ 24 ุณุงุนุฉ (ูุซุงู: 14:30)")
        
        while True:
            time_input = input("ุงูููุช (HH:MM): ").strip()
            try:
                hour, minute = map(int, time_input.split(':'))
                if 0 <= hour <= 23 and 0 <= minute <= 59:
                    self.user_data['schedule_type'] = 'daily'
                    self.user_data['schedule_time'] = f"{hour:02d}:{minute:02d}"
                    print(f"โ ุณูุชู ุงูุชุดุบูู ููููุงู ูู ุงูุณุงุนุฉ {hour:02d}:{minute:02d}")
                    break
                else:
                    print("โ ููุช ุบูุฑ ุตุญูุญ!")
            except ValueError:
                print("โ ุชูุณูู ุบูุฑ ุตุญูุญ! ุงุณุชุฎุฏู HH:MM")
    
    def get_weekly_schedule(self):
        """ุชุญุฏูุฏ ุงูุชูููุช ุงูุฃุณุจูุนู"""
        days = ["ุงูุฃุญุฏ", "ุงูุงุซููู", "ุงูุซูุงุซุงุก", "ุงูุฃุฑุจุนุงุก", "ุงูุฎููุณ", "ุงูุฌูุนุฉ", "ุงูุณุจุช"]
        
        print("\n๐ ุงูุชุดุบูู ุงูุฃุณุจูุนู:")
        print("ุงุฎุชุฑ ููู ุงูุฃุณุจูุน:")
        for i, day in enumerate(days, 1):
            print(f"   {i}. {day}")
        
        while True:
            try:
                day_choice = int(input("ุงุฎุชุฑ ุงูููู (1-7): ")) - 1
                if 0 <= day_choice <= 6:
                    selected_day = days[day_choice]
                    break
                else:
                    print("โ ุงุฎุชูุงุฑ ุบูุฑ ุตุญูุญ!")
            except ValueError:
                print("โ ูุฌุจ ุฅุฏุฎุงู ุฑูู!")
        
        while True:
            time_input = input("ุงูููุช (HH:MM): ").strip()
            try:
                hour, minute = map(int, time_input.split(':'))
                if 0 <= hour <= 23 and 0 <= minute <= 59:
                    self.user_data['schedule_type'] = 'weekly'
                    self.user_data['schedule_day'] = day_choice
                    self.user_data['schedule_time'] = f"{hour:02d}:{minute:02d}"
                    print(f"โ ุณูุชู ุงูุชุดุบูู ูู {selected_day} ูู ุงูุณุงุนุฉ {hour:02d}:{minute:02d}")
                    break
                else:
                    print("โ ููุช ุบูุฑ ุตุญูุญ!")
            except ValueError:
                print("โ ุชูุณูู ุบูุฑ ุตุญูุญ! ุงุณุชุฎุฏู HH:MM")
    
    def get_monthly_schedule(self):
        """ุชุญุฏูุฏ ุงูุชูููุช ุงูุดูุฑู"""
        print("\n๐ ุงูุชุดุบูู ุงูุดูุฑู:")
        
        while True:
            try:
                day = int(input("ุงูููู ูู ุงูุดูุฑ (1-28): "))
                if 1 <= day <= 28:
                    break
                else:
                    print("โ ุงูููู ูุฌุจ ุฃู ูููู ุจูู 1 ู 28!")
            except ValueError:
                print("โ ูุฌุจ ุฅุฏุฎุงู ุฑูู!")
        
        while True:
            time_input = input("ุงูููุช (HH:MM): ").strip()
            try:
                hour, minute = map(int, time_input.split(':'))
                if 0 <= hour <= 23 and 0 <= minute <= 59:
                    self.user_data['schedule_type'] = 'monthly'
                    self.user_data['schedule_day'] = day
                    self.user_data['schedule_time'] = f"{hour:02d}:{minute:02d}"
                    print(f"โ ุณูุชู ุงูุชุดุบูู ููู {day} ูู ูู ุดูุฑ ูู ุงูุณุงุนุฉ {hour:02d}:{minute:02d}")
                    break
                else:
                    print("โ ููุช ุบูุฑ ุตุญูุญ!")
            except ValueError:
                print("โ ุชูุณูู ุบูุฑ ุตุญูุญ! ุงุณุชุฎุฏู HH:MM")
    
    def save_config(self):
        """ุญูุธ ุงูุฅุนุฏุงุฏุงุช"""
        try:
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(self.user_data, f, ensure_ascii=False, indent=2)
            print(f"\nโ ุชู ุญูุธ ุงูุฅุนุฏุงุฏุงุช ูู {self.config_file}")
            return True
        except Exception as e:
            print(f"โ ุฎุทุฃ ูู ุญูุธ ุงูุฅุนุฏุงุฏุงุช: {e}")
            return False
    
    def show_summary(self):
        """ุนุฑุถ ููุฎุต ุงูุฅุนุฏุงุฏุงุช"""
        print("\n" + "=" * 80)
        print("๐ ููุฎุต ุงูุฅุนุฏุงุฏุงุช")
        print("=" * 80)
        
        print(f"๐ค ุงูุงุณู: {self.user_data['name']}")
        print(f"๐ง ุงูุจุฑูุฏ ุงูุฅููุชุฑููู: {self.user_data['email']}")
        print(f"๐ฑ ุงููุงุชู: {self.user_data['phone']}")
        print(f"๐ ููู ุงูุณูุฑุฉ ุงูุฐุงุชูุฉ: {self.user_data['cv_file']}")
        print(f"๐ผ ุงูุชุฎุตุต: {self.user_data['job_title']}")
        print(f"๐๏ธ ุนุฏุฏ ุงููุฏู: {len(self.user_data['target_cities'])}")
        
        if len(self.user_data['target_cities']) <= 10:
            print("   ุงููุฏู ุงููุฎุชุงุฑุฉ:")
            for city in self.user_data['target_cities']:
                print(f"   โข {city}")
        else:
            print("   ุงููุฏู ุงููุฎุชุงุฑุฉ: (ุฃูู 10 ูุฏู)")
            for city in self.user_data['target_cities'][:10]:
                print(f"   โข {city}")
            print(f"   ... ู {len(self.user_data['target_cities']) - 10} ูุฏู ุฃุฎุฑู")
        
        schedule_type = self.user_data['schedule_type']
        if schedule_type == 'immediate':
            print("โฐ ุงูุชุดุบูู: ููุฑู")
        elif schedule_type == 'daily':
            print(f"โฐ ุงูุชุดุบูู: ูููู ูู ุงูุณุงุนุฉ {self.user_data['schedule_time']}")
        elif schedule_type == 'weekly':
            days = ["ุงูุฃุญุฏ", "ุงูุงุซููู", "ุงูุซูุงุซุงุก", "ุงูุฃุฑุจุนุงุก", "ุงูุฎููุณ", "ุงูุฌูุนุฉ", "ุงูุณุจุช"]
            day_name = days[self.user_data['schedule_day']]
            print(f"โฐ ุงูุชุดุบูู: ุฃุณุจูุนู ูู {day_name} ูู ุงูุณุงุนุฉ {self.user_data['schedule_time']}")
        elif schedule_type == 'monthly':
            print(f"โฐ ุงูุชุดุบูู: ุดูุฑู ููู {self.user_data['schedule_day']} ูู ุงูุณุงุนุฉ {self.user_data['schedule_time']}")
        
        print("\nโ ุชู ุฅุนุฏุงุฏ ุงููุธุงู ุจูุฌุงุญ!")
        print("๐ ููููู ุงูุขู ุชุดุบูู ุงููุธุงู ุจุงุณุชุฎุฏุงู: python3 run_system.py")
        print("=" * 80)
    
    def run(self):
        """ุชุดุบูู ุนูููุฉ ุงูุฅุนุฏุงุฏ"""
        self.welcome_message()
        self.get_user_info()
        
        if self.save_config():
            self.show_summary()
            return True
        else:
            print("โ ูุดู ูู ุญูุธ ุงูุฅุนุฏุงุฏุงุช!")
            return False

def main():
    """ุงูุฏุงูุฉ ุงูุฑุฆูุณูุฉ"""
    setup = UserSetup()
    success = setup.run()
    
    if success:
        print("\n๐ ุชู ุงูุฅุนุฏุงุฏ ุจูุฌุงุญ!")
        print("๐ ุฑุงุฌุน ููู 'ุฏููู_ุงูุชุดุบูู.md' ููุญุตูู ุนูู ุชุนูููุงุช ููุตูุฉ")
        return 0
    else:
        print("\nโ ูุดู ูู ุงูุฅุนุฏุงุฏ!")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 